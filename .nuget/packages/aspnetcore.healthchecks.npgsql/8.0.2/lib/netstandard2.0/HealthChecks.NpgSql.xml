<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HealthChecks.NpgSql</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.NpgSqlHealthCheckBuilderExtensions">
            <summary>
            Extension methods to configure <see cref="T:HealthChecks.NpgSql.NpgSqlHealthCheck"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NpgSqlHealthCheckBuilderExtensions.AddNpgSql(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.String,System.Action{Npgsql.NpgsqlConnection},System.String,System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})">
            <summary>
            Add a health check for Postgres databases.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder"/>.</param>
            <param name="connectionString">The Postgres connection string to be used.</param>
            <param name="healthQuery">The query to be used in check.</param>
            <param name="configure">An optional action to allow additional Npgsql specific configuration.</param>
            <param name="name">The health check name. Optional. If <c>null</c> the type name 'npgsql' will be used for the name.</param>
            <param name="failureStatus">
            The <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus"/> that should be reported when the health check fails. Optional. If <c>null</c> then
            the default status of <see cref="F:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy"/> will be reported.
            </param>
            <param name="tags">A list of tags that can be used to filter sets of health checks. Optional.</param>
            <param name="timeout">An optional <see cref="T:System.TimeSpan"/> representing the timeout of the check.</param>
            <returns>The specified <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NpgSqlHealthCheckBuilderExtensions.AddNpgSql(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.Func{System.IServiceProvider,System.String},System.String,System.Action{Npgsql.NpgsqlConnection},System.String,System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})">
            <summary>
            Add a health check for Postgres databases.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder"/>.</param>
            <param name="connectionStringFactory">A factory to build the Postgres connection string to use.</param>
            <param name="healthQuery">The query to be used in check.</param>
            <param name="configure">An optional action to allow additional Npgsql specific configuration.</param>
            <param name="name">The health check name. Optional. If <c>null</c> the type name 'npgsql' will be used for the name.</param>
            <param name="failureStatus">
            The <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus"/> that should be reported when the health check fails. Optional. If <c>null</c> then
            the default status of <see cref="F:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy"/> will be reported.
            </param>
            <param name="tags">A list of tags that can be used to filter sets of health checks. Optional.</param>
            <param name="timeout">An optional <see cref="T:System.TimeSpan"/> representing the timeout of the check.</param>
            <returns>The specified <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NpgSqlHealthCheckBuilderExtensions.AddNpgSql(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.Func{System.IServiceProvider,Npgsql.NpgsqlDataSource},System.String,System.Action{Npgsql.NpgsqlConnection},System.String,System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})">
            <summary>
            Add a health check for Postgres databases.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder"/>.</param>
            <param name="dbDataSourceFactory">
            An optional factory to obtain <see cref="T:Npgsql.NpgsqlDataSource" /> instance.
            When not provided, <see cref="T:Npgsql.NpgsqlDataSource" /> is simply resolved from <see cref="T:System.IServiceProvider"/>.
            </param>
            <param name="healthQuery">The query to be used in check.</param>
            <param name="configure">An optional action to allow additional Npgsql specific configuration.</param>
            <param name="name">The health check name. Optional. If <c>null</c> the type name 'npgsql' will be used for the name.</param>
            <param name="failureStatus">
            The <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus"/> that should be reported when the health check fails. Optional. If <c>null</c> then
            the default status of <see cref="F:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy"/> will be reported.
            </param>
            <param name="tags">A list of tags that can be used to filter sets of health checks. Optional.</param>
            <param name="timeout">An optional <see cref="T:System.TimeSpan"/> representing the timeout of the check.</param>
            <returns>The specified <paramref name="builder"/>.</returns>
            <remarks>
            Depending on how the <see cref="T:Npgsql.NpgsqlDataSource" /> was configured, the connections it hands out may be pooled.
            That is why it should be the exact same <see cref="T:Npgsql.NpgsqlDataSource" /> that is used by other parts of your app.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.NpgSqlHealthCheckBuilderExtensions.AddNpgSql(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,HealthChecks.NpgSql.NpgSqlHealthCheckOptions,System.String,System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.TimeSpan})">
            <summary>
            Add a health check for Postgres databases.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder"/>.</param>
            <param name="options">Options for health check.</param>
            <param name="name">The health check name. Optional. If <c>null</c> the type name 'npgsql' will be used for the name.</param>
            <param name="failureStatus">
            The <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus"/> that should be reported when the health check fails. Optional. If <c>null</c> then
            the default status of <see cref="F:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy"/> will be reported.
            </param>
            <param name="tags">A list of tags that can be used to filter sets of health checks. Optional.</param>
            <param name="timeout">An optional <see cref="T:System.TimeSpan"/> representing the timeout of the check.</param>
            <returns>The specified <paramref name="builder"/>.</returns>
        </member>
        <member name="T:HealthChecks.NpgSql.NpgSqlHealthCheck">
            <summary>
            A health check for Postgres databases.
            </summary>
        </member>
        <member name="M:HealthChecks.NpgSql.NpgSqlHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HealthChecks.NpgSql.NpgSqlHealthCheckOptions">
            <summary>
            Options for <see cref="T:HealthChecks.NpgSql.NpgSqlHealthCheck"/>.
            </summary>
        </member>
        <member name="M:HealthChecks.NpgSql.NpgSqlHealthCheckOptions.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:HealthChecks.NpgSql.NpgSqlHealthCheckOptions"/>.
            </summary>
            <param name="connectionString">The PostgreSQL connection string to be used.</param>
            <remarks>
            <see cref="T:Npgsql.NpgsqlDataSource"/> supports additional configuration beyond the connection string,
            such as logging, advanced authentication options, type mapping management, and more.
            To further configure a data source, use <see cref="T:Npgsql.NpgsqlDataSourceBuilder"/> and
            the <see cref="M:HealthChecks.NpgSql.NpgSqlHealthCheckOptions.#ctor(Npgsql.NpgsqlDataSource)"/> constructor.
            </remarks>
        </member>
        <member name="M:HealthChecks.NpgSql.NpgSqlHealthCheckOptions.#ctor(Npgsql.NpgsqlDataSource)">
            <summary>
            Creates an instance of <see cref="T:HealthChecks.NpgSql.NpgSqlHealthCheckOptions"/>.
            </summary>
            <param name="dataSource">The Postgres <see cref="T:Npgsql.NpgsqlDataSource" /> to be used.</param>
            <remarks>
            Depending on how the <see cref="T:Npgsql.NpgsqlDataSource" /> was configured, the connections it hands out may be pooled.
            That is why it should be the exact same <see cref="T:Npgsql.NpgsqlDataSource" /> that is used by other parts of your app.
            </remarks>
        </member>
        <member name="P:HealthChecks.NpgSql.NpgSqlHealthCheckOptions.ConnectionString">
            <summary>
            The Postgres connection string to be used.
            </summary>
            <remarks>
            <see cref="T:Npgsql.NpgsqlDataSource"/> supports additional configuration beyond the connection string,
            such as logging, advanced authentication options, type mapping management, and more.
            To further configure a data source, use <see cref="T:Npgsql.NpgsqlDataSourceBuilder"/> and the <see cref="M:HealthChecks.NpgSql.NpgSqlHealthCheckOptions.#ctor(Npgsql.NpgsqlDataSource)"/> constructor.
            </remarks>
        </member>
        <member name="P:HealthChecks.NpgSql.NpgSqlHealthCheckOptions.DataSource">
            <summary>
            The Postgres <see cref="T:Npgsql.NpgsqlDataSource" /> to be used.
            </summary>
            <remarks>
            Depending on how the <see cref="T:Npgsql.NpgsqlDataSource" /> was configured, the connections it hands out may be pooled.
            That is why it should be the exact same <see cref="T:Npgsql.NpgsqlDataSource" /> that is used by other parts of your app.
            </remarks>
        </member>
        <member name="P:HealthChecks.NpgSql.NpgSqlHealthCheckOptions.CommandText">
            <summary>
            The query to be executed.
            </summary>
        </member>
        <member name="P:HealthChecks.NpgSql.NpgSqlHealthCheckOptions.Configure">
            <summary>
            An optional action executed before the connection is opened in the health check.
            </summary>
        </member>
        <member name="P:HealthChecks.NpgSql.NpgSqlHealthCheckOptions.HealthCheckResultBuilder">
            <summary>
            An optional delegate to build health check result.
            </summary>
        </member>
        <member name="T:ApiMarker">
            <summary>
            Used for test purposes only.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="M:Guard.ThrowIfNull``1(``0,System.Boolean,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null.</summary>
            <param name="argument">The reference type argument to validate as non-null.</param>
            <param name="throwOnEmptyString">Only applicable to strings.</param>
            <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        </member>
    </members>
</doc>
